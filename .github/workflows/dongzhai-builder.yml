name: 栋仔主题通用编译平台

on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本类型'
        required: true
        default: 'stable'
        type: choice
        options:
        - stable
        - dev
  push:
    branches: [ main, master ]
    paths:
      - '.config'
  schedule:
    - cron: '0 2 * * 1'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true

jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 240

    steps:
    - name: 检查代码和配置文件
      uses: actions/checkout@v4
      with:
        path: repository

    - name: 验证配置文件
      run: |
        echo "=== 验证配置文件 ==="
        if [ ! -f "repository/.config" ]; then
          echo "❌ 错误：未找到 .config 文件"
          exit 1
        fi
        echo "✅ 找到配置文件"

    - name: 初始化环境
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python2.7 python3 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
        sudo mkdir -p /mnt/openwrt
        sudo chown $USER:$GROUP /mnt/openwrt
        python2.7 --version
        echo "✅ 环境初始化完成"

    - name: 克隆Lean源码
      working-directory: /mnt/openwrt
      run: |
        echo "克隆 Lean OpenWrt 源码..."
        git clone $REPO_URL -b $REPO_BRANCH lede
        ln -sf /mnt/openwrt/lede $GITHUB_WORKSPACE/lede
        echo "✅ 源码克隆完成"

    - name: 更新软件源
      run: |
        cd lede
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        echo "✅ 软件源更新完成"

    - name: 部署栋仔个性化设置
      run: |
        cd lede
        echo "开始部署栋仔个性化设置..."
        
        mkdir -p package/lean/dongzhai-theme/luci-theme-dongzhai
        
        if [ -d "$GITHUB_WORKSPACE/repository/.github/themes/dongzhai" ]; then
          echo "复制栋仔主题文件..."
          cp -r $GITHUB_WORKSPACE/repository/.github/themes/dongzhai/* package/lean/dongzhai-theme/
        fi
        
        cat > package/lean/dongzhai-theme/luci-theme-dongzhai/Makefile << 'EOF'
include $(TOPDIR)/rules.mk

LUCI_TITLE:=栋仔个性化主题
LUCI_DEPENDS:=
PKG_VERSION:=1.0
PKG_RELEASE:=1

include $(INCLUDE_DIR)/package.mk

define Package/luci-theme-dongzhai
  $(call Package/luci/webtemplate)
  TITLE:=栋仔个性化主题
  DEPENDS:=+luci-compat
endef

define Package/luci-theme-dongzhai/description
  栋仔个性化主题
endef

define Build/Configure
endef

define Build/Compile
endef

define Package/luci-theme-dongzhai/install
	$(INSTALL_DIR) $(1)/www/luci-static/dongzhai
	[ -d ./files ] && $(CP) ./files/* $(1)/www/luci-static/dongzhai/
endef

$(eval $(call BuildPackage,luci-theme-dongzhai))
EOF

        echo "✅ 栋仔个性化设置部署完成"

    - name: 应用配置并添加个性化设置
      run: |
        cd lede
        cp $GITHUB_WORKSPACE/repository/.config .config
        
        if ! grep -q "CONFIG_PACKAGE_luci-theme-dongzhai=y" .config; then
          echo "添加栋仔主题配置..."
          echo "" >> .config
          echo "# 栋仔个性化主题配置" >> .config
          echo "CONFIG_PACKAGE_luci-theme-dongzhai=y" >> .config
        fi
        
        if grep -q "CONFIG_PACKAGE_luci=y" .config; then
          echo "设置栋仔主题为默认..."
          sed -i '/CONFIG_DEFAULT_luci-theme/d' .config
          echo "CONFIG_DEFAULT_luci-theme-dongzhai=y" >> .config
        fi
        
        make defconfig
        echo "✅ 配置应用完成"

    - name: 下载软件包
      run: |
        cd lede
        echo "开始下载软件包..."
        make download -j$(nproc)
        echo "✅ 软件包下载完成"

    - name: 编译固件
      run: |
        cd lede
        echo "开始编译..."
        echo "使用 $(($(nproc) / 2 + 1)) 个线程编译..."
        make -j$(($(nproc) / 2 + 1)) || make -j1 || make -j1 V=s
        echo "✅ 编译完成"

    - name: 收集编译结果
      id: collect_results
      run: |
        cd lede/bin/targets
        
        FIRMWARE_FILES=$(find . -name "*.bin" -type f)
        if [ -n "$FIRMWARE_FILES" ]; then
          echo "🎉 找到编译输出文件:"
          for file in $FIRMWARE_FILES; do
            if [ -f "$file" ]; then
              size=$(du -h "$file" | cut -f1)
              echo "  📄 $file (大小: $size)"
            fi
          done
          
          FIRST_FILE=$(echo "$FIRMWARE_FILES" | head -1)
          DEVICE_PATH=$(dirname "$FIRMWARE_FILES")
          ARCH_INFO=$(echo "$FIRMWARE_FILES" | head -1 | grep -o 'targets/[^/]*/[^/]*' | cut -d'/' -f2-3 | tr '/' '_')
          
          echo "has_firmware=true" >> $GITHUB_OUTPUT
          echo "firmware_count=$(echo "$FIRMWARE_FILES" | wc -w)" >> $GITHUB_OUTPUT
          echo "device_arch=$ARCH_INFO" >> $GITHUB_ENV
        else
          echo "❌ 未找到固件文件!"
          echo "has_firmware=false" >> $GITHUB_OUTPUT
        fi

    - name: 上传固件到Artifacts
      uses: actions/upload-artifact@v4
      if: steps.collect_results.outputs.has_firmware == 'true'
      with:
        name: 栋仔固件_${{ env.device_arch }}_${{ github.event.inputs.version }}
        path: lede/bin/targets/**/*.bin
        retention-days: 30

    - name: 创建版本发布
      if: steps.collect_results.outputs.has_firmware == 'true' && env.UPLOAD_RELEASE == 'true'
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: dongzhai-${{ env.device_arch }}-${{ github.event.inputs.version }}-$(date +%Y%m%d)
        name: 栋仔主题固件 ${{ github.event.inputs.version }} - ${{ env.device_arch }}
        body: |
          # 🏠 栋仔主题个性化固件
          
          ## 📋 编译信息
          - **编译时间**: $(date)
          - **版本类型**: ${{ github.event.inputs.version }}
          - **目标平台**: ${{ env.device_arch }}
          - **源码基础**: coolsnowwolf/lede
          - **个性化**: 栋仔主题定制
          
          ## 🎨 特色功能
          - ✨ 深度定制的栋仔个性化主题
          - 🎯 优化的用户界面体验
          - 📱 良好的移动端适配
          - 🔧 基于Lean稳定源码
          
          ## ⚙️ 配置驱动
          此固件完全由 `.config` 文件驱动编译，支持灵活切换各种设备平台。
          
          ## 📦 包含内容
          - 栋仔个性化主题界面
          - 根据配置文件定制的软件包
          - 系统基础功能
        files: lede/bin/targets/**/*.bin
        draft: false
        prerelease: ${{ github.event.inputs.version == 'dev' }}

    - name: 编译总结
      if: always()
      run: |
        echo "=========================================="
        echo "           🏁 编译任务完成"
        echo "=========================================="
        if [ "${{ success() }}" = "true" ]; then
          if [ "${{ steps.collect_results.outputs.has_firmware }}" = "true" ]; then
            echo "✅ 编译成功!"
            echo "📊 生成 ${{ steps.collect_results.outputs.firmware_count }} 个固件文件"
            echo "🏷️ 平台: ${{ env.device_arch }}"
          else
            echo "⚠️ 编译完成但未找到固件文件"
          fi
        else
          echo "❌ 编译失败!"
        fi
