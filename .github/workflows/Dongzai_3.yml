name: 🏠 栋仔主题个性化固件编译

on:
  workflow_dispatch:
    inputs:
      clean_build:
        description: '是否清理重新编译'
        required: false
        default: false
        type: boolean
      compile_threads:
        description: '编译线程数 (推荐1-2)'
        required: false
        default: 1
        type: choice
        options:
        - 1
        - 2

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  BUILD_DIR: lede

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
    - name: 📋 初始化检查
      uses: actions/checkout@v4

    - name: 🔍 验证配置文件
      run: |
        echo "=== 配置文件验证 ==="
        if [ ! -f ".config" ]; then
          echo "❌ 错误：未找到 .config 文件"
          exit 1
        fi
        echo "✅ 找到配置文件"

    - name: 🛠️ 安装编译环境
      run: |
        echo "=== 安装编译工具链 ==="
        sudo apt-get update
        sudo apt-get install -y build-essential git libncurses5-dev libssl-dev python3 unzip wget curl
        echo "✅ 环境安装完成"

    - name: 📥 克隆Lean源码
      run: |
        echo "=== 克隆OpenWrt源码 ==="
        if [ -d "$BUILD_DIR" ] && [ "${{ github.event.inputs.clean_build }}" = "true" ]; then
          echo "清理旧编译目录..."
          rm -rf $BUILD_DIR
        fi
        
        if [ ! -d "$BUILD_DIR" ]; then
          git clone --depth 1 $REPO_URL $BUILD_DIR
          echo "✅ 源码克隆完成"
        else
          echo "✅ 使用现有源码目录"
        fi

    - name: 🔄 更新软件源
      run: |
        cd $BUILD_DIR
        echo "=== 更新软件源和包 ==="
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        echo "✅ 软件源更新完成"

    - name: 🚫 彻底处理Node.js问题
      run: |
        cd $BUILD_DIR
        echo "=== 彻底处理Node.js编译问题 ==="
        
        # 从feeds中移除node包
        if [ -d "feeds/packages/lang/node" ]; then
          rm -rf feeds/packages/lang/node
          echo "✅ 移除 feeds/packages/lang/node"
        fi
        
        # 创建空的node目录避免错误
        mkdir -p feeds/packages/lang/node
        touch feeds/packages/lang/node/Makefile
        echo "✅ 创建空Node.js目录避免依赖错误"

    - name: 🎨 部署栋仔主题
      run: |
        cd $BUILD_DIR
        echo "=== 部署个性化主题 ==="
        
        THEME_DIR="package/lean/dongzhai-theme/luci-theme-dongzhai"
        mkdir -p $THEME_DIR/files/www/luci-static/dongzhai/css
        
        # 创建主题Makefile
        cat > $THEME_DIR/Makefile << 'EOF'
include $(TOPDIR)/rules.mk

LUCI_TITLE:=栋仔个性化主题
LUCI_DEPENDS:=
PKG_VERSION:=1.0
PKG_RELEASE:=1

include $(INCLUDE_DIR)/package.mk

define Package/luci-theme-dongzhai
  $(call Package/luci/webtemplate)
  TITLE:=栋仔个性化主题
  DEPENDS:=+luci-compat
endef

define Package/luci-theme-dongzhai/description
  栋仔个性化主题
endef

define Build/Configure
endef

define Build/Compile
endef

define Package/luci-theme-dongzhai/install
	$(INSTALL_DIR) $(1)/www/luci-static/dongzhai
	[ -d ./files ] && $(CP) ./files/* $(1)/www/luci-static/dongzhai/
endef

$(eval $(call BuildPackage,luci-theme-dongzhai))
EOF

        # 创建主题样式文件
        cat > $THEME_DIR/files/www/luci-static/dongzhai/css/style.css << 'EOF'
/* 栋仔个性化主题样式 */
.header .fill .brand {
    color: #ff6600;
    font-weight: bold;
    font-size: 18px;
}

.sidebar {
    background: #2c3e50;
}

.sidebar .nav > li > a {
    color: #ecf0f1;
}

.btn-primary {
    background-color: #ff6600;
    border-color: #ff6600;
}
EOF

        echo "✅ 栋仔主题部署完成"

    - name: ⚙️ 应用编译配置
      run: |
        cd $BUILD_DIR
        echo "=== 应用编译配置 ==="
        
        # 复制用户配置文件
        cp ../.config .config
        
        # 彻底禁用Node.js
        echo "# CONFIG_PACKAGE_node is not set" >> .config
        echo "# CONFIG_PACKAGE_node-npm is not set" >> .config
        echo "# CONFIG_PACKAGE_node-yarn is not set" >> .config
        
        # 确保栋仔主题配置
        echo "CONFIG_PACKAGE_luci-theme-dongzhai=y" >> .config
        echo "CONFIG_DEFAULT_luci-theme-dongzhai=y" >> .config
        
        make defconfig
        echo "✅ 配置应用完成"

    - name: 📦 下载软件包
      run: |
        cd $BUILD_DIR
        echo "=== 下载依赖软件包 ==="
        
        THREADS=${{ github.event.inputs.compile_threads || 1 }}
        make download -j$THREADS
        echo "✅ 软件包下载完成"

    - name: 🔨 编译固件
      run: |
        cd $BUILD_DIR
        echo "=== 开始编译固件 ==="
        
        THREADS=${{ github.event.inputs.compile_threads || 1 }}
        echo "使用 $THREADS 个线程编译..."
        
        start_time=$(date +%s)
        echo "编译开始时间: $(date)"
        
        if [ "$THREADS" = "1" ]; then
          make -j1 V=s
        else
          make -j$THREADS
        fi
        
        end_time=$(date +%s)
        duration=$((end_time - start_time))
        hours=$((duration / 3600))
        minutes=$(( (duration % 3600) / 60 ))
        seconds=$((duration % 60))
        
        echo "✅ 编译完成!"
        echo "总编译时间: ${hours}小时 ${minutes}分钟 ${seconds}秒"

    - name: 📤 收集编译结果
      id: collect_firmware
      run: |
        cd $BUILD_DIR/bin/targets
        echo "=== 收集编译结果 ==="
        
        FIRMWARE_FILES=$(find . -name "*.bin" -type f)
        
        if [ -n "$FIRMWARE_FILES" ]; then
          echo "🎉 找到固件文件:"
          for file in $FIRMWARE_FILES; do
            if [ -f "$file" ]; then
              size=$(du -h "$file" | cut -f1)
              echo "  $file ($size)"
            fi
          done
          
          FIRST_FILE=$(echo "$FIRMWARE_FILES" | head -1)
          DEVICE_INFO=$(echo "$FIRMWARE_FILES" | head -1 | grep -o 'targets/[^/]*/[^/]*' | cut -d'/' -f2-3 | tr '/' '_')
          
          echo "has_firmware=true" >> $GITHUB_OUTPUT
          echo "firmware_count=$(echo "$FIRMWARE_FILES" | wc -w)" >> $GITHUB_OUTPUT
          echo "device_info=$DEVICE_INFO" >> $GITHUB_ENV
          
        else
          echo "❌ 未找到固件文件!"
          echo "has_firmware=false" >> $GITHUB_OUTPUT
        fi

    - name: 📎 上传固件到Artifacts
      if: steps.collect_firmware.outputs.has_firmware == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: 栋仔固件_${{ env.device_info }}
        path: ${{ env.BUILD_DIR }}/bin/targets/**/*.bin
        retention-days: 30

    - name: 🚀 创建版本发布
      if: steps.collect_firmware.outputs.has_firmware == 'true'
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: dongzhai-${{ env.device_info }}-$(date +%Y%m%d)
        name: 栋仔主题固件 - ${{ env.device_info }}
        body: |
          # 栋仔主题个性化固件
          
          ## 编译信息
          - **设备平台**: ${{ env.device_info }}
          - **编译时间**: $(date)
          - **源码版本**: Lean's OpenWrt
          
          ## 主题特色
          - 栋仔个性化主题界面
          - 彻底禁用Node.js确保编译成功
          
          ## 刷机说明
          1. 首次刷机使用 factory.bin 文件
          2. 系统升级使用 sysupgrade.bin 文件
          3. 刷机前请备份重要配置
        files: ${{ env.BUILD_DIR }}/bin/targets/**/*.bin
        draft: false
        prerelease: false

    - name: 📊 编译总结报告
      if: always()
      run: |
        echo ""
        echo "================================================"
        echo "              编译任务完成报告"
        echo "================================================"
        
        if [ "${{ success() }}" = "true" ]; then
          if [ "${{ steps.collect_firmware.outputs.has_firmware }}" = "true" ]; then
            echo "✅ 编译成功!"
            echo "固件数量: ${{ steps.collect_firmware.outputs.firmware_count }} 个"
            echo "设备平台: ${{ env.device_info }}"
            echo "下载位置: Actions → Artifacts"
          else
            echo "⚠️ 编译完成但未生成固件文件"
          fi
        else
            echo "❌ 编译失败!"
        fi
        echo "================================================"
